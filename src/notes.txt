 //Random development notes. Nothing in this file should be taken as an indication of anything other than
 //  something I was thinking at some point during development.
 
//TODO
 //Level 1
 //*ship rotation, movement
 //*scrolling background
 //*bullets - bug with explosion?
 //*collision detection
 //  *ship-to-ship - first pass - BB
 //  *bullet-to-ship - ditto
 //  *bullet-to-wall
 //  *ship-to-wall - seems OK.....
 
 //Level 2
 //*split screen
 //*first level design and -import
 //*status display=>variable mass, ammo etc. - need to calc mass, ammo2, end on lives=0
 //*landing pads
 //*level metadata - start pos, landing pad pos & properties (refuelling etc), water, updrafts.....
 
 //Level 3 - finish TR
 //*sound
 //*more sounds (wind, engine, menu sound)
 //*more levels - need to sort out making collision map - all TR levels done
 //*all weapon types
 //*front end menu 
 //  DO this in 3 columns, left col has map names (as now). when you select a map, the next col pops up,
 //  listing players - white if selectable, grey if not (cos too big - read from map text file) *colour* if selected
 //  (could wind profile saving in here maybe...)
 //  Selected player shows key/joystick config in right col. COuld also pick/enter name....
 //  need to read number of USB joysticks. Start p1,p2 keyboard, scroll down through GPIO joystick (commad line option?)
 //  then USBs. Start with p3,p4 N/A as sensible default.
 //*ship config menu
 //  Key handling is more complicated with this - I think the answer is to store more info in ship struct - 
 //  perhaps ship[i].left_pressed, ship[i].left_released (also for right,fire1,fire2 - rename up/down??)
 //  so _pressed is set TRUE by ScanInputs(). Can then be cleared by reading code for one-shot effect,
 //  or cleared by ScanInputs() when released, at which time _released is set.
 //  Hmmm.... sounds like I don't really need _released. 
 //  more detail: Code in main loop processes Allegro event and sets value in pressed_keys[] in even was DOWN,
 //				  clears value in pressed_keys[] in event was UP.
 //               ScanInputs() then maps this across to Ship[] structs.
 //				  ScanInputs also reads GPIO Joystick and puts this info in. Note that SI() clears pressed_keys for fire2.
 //                 and also has a state machine to acheive the same effect for GPIO Joystick.
 //				  UpdateShips() takes the values from ship[] struct, and does stuff accordingly.
 //				  The keys need one-short or continuous depending on menu states, so the 'clever' bit should
 //               be in UpdateShips().
 //               So... how about we keep the main loop code, and add joystick (GPIO & USB?) stuff, 
 //				  so that ship.left etc get set once on press, clear on release, but can be cleared by later code.
 //				  main loop code should be in terms of devices (keys, joystick)
 //				  ScanInputs should carry on doing the mapping.
 //	Messy. better: 
 //	2 key event log arrays, replacing pressed_keys, key_down_log[] & key_up_log[].
 //	Ship struct extended, so we have key_x_down and key_x_held
 //	ScanInputs() sets Ship.key_x_down and Ship.key_x_held when key_down_log[] is set, and then clears key_down_log[]
 //	ScanInputs() clears Ship.key_x_held when key_up_log[] is set, and then clears key_up_log[].
 //	Other code (e.g menu handling) clears Ship.key_x_down on read.
 //	USB joystick should be similar, as it's event based.
 //	Need to generate on/off events for GPIO joystick.
 //	
 //*race
 //  Specify start/finish line as pair of x,y co-ords line must be horizontal or vertical, i.e either x1=x2, or y1=y2.
 //  Read this in, and create 2 areas, before and after line, by extending 'same' coord,
 //  e.g. horizontal line, 100,100 200,100 so areas are 100,90;200,90 plus line coords, and 100,110;200,110 plus line co-ords.
 //  Check (like with special areas) if we are in 'before' area. If we are flag it. If we were in it last time, then check 
 //  for 'after area'. toggle timing on transition. Do timing as float, with increment as 1/30, add this each frame. Ooooh. or 
 //  could use al_get_time. Ah, no, I'd like it to update every frame, so might as well just add on...
 //  DIsplay two times in status bar? running and last lap? - need small font.... 7 seg???
 
 //Level 4 - new stuff
 //*Draw (render) tiles - also collision tiles
 //*make map drawing tool - based on original gameloop, load map from ascii file, key to reload
 // improved this a bit - have mouse drag and drop, save, show grid.
 //*code for tilemap drawing and collision
 //  *ship-wall collision,
 //  *bullet-wall collision
 //*Sentry guns - define position, orientation(NESW), fire rate in map file
 // populate (array of) struct with this, new functions for CheckBSentry collisions & update sentry (firing & exploding!)
 // done volcanoes, parameters:
    x,y direction (of fire, 0-39) type (volcano, but currently unused) period, probability, random.
    waits for period (in 1/30th s frames) then has 'probability' of firing, 'random' applied to vector.
//  for sentry, targeted would be good. one more parameter. No targeted is type. done :-)
//  also add range for targetted sentries.
//also, sentries can be destroyed, so need to be drawn like ships. 
//so specify a sprite sheet along with map tiles etc, and an offset into this for each sentry
//this lets you have different orientations, or even diffecnt styles of sentry....
 
 //Warp gateways (Z)!
 //Sentry/volcano:
 //  Quiet time/active time/frames between firing when active/number of bullets per fire
 //  random flag to tweak last 2 params. Volcano flag for colour!
 //Extras
 //*usb joystick!
 //radar? big radar for 3 player?
 //network? - radar for network, if I ever do it....
 
 //Level ideas:
 //*Zoë's 2 player volcano/warp gate level
 //*4-player X shape
 //*black hole with rocks (2 player?) - includes wrapping as 'warp gate'
 //*1 player rescue mission (rescuing?? - pickup areas, show in status bar?) no pads??
 //  Or pickup on pads - animated rescuee?
 //pacman-like 4-player?
 //*hexagons.... beehive? alien beehive!
 //  need 9 tiles in square + Sentry(L/R/T) + eggshells on floor (x2), + goo on ceiling (x2) + Pads w/flag + house?
 //  eggshells - sphere, scale, subtract smaller, half with plane, jagged edge with boxes
 //  goo - blob. pink? long goo may need second tile
 //  pad: /--------\ with flag.
 //  Aside: tiles 64 wide (split into two 32 bit words in collision map , display x1, need new collision maps for ships)
 //         or 32 wide, single word, display x2, use same collision map. 
 //	    allow both?
 //	    DONE: Render/display as 64, use 32 collision map.
 //*[vertically sliding map list in menu??]
 //Thrust missions - need forcefields
 // forcefields drawn as sprites (so they can vanish...)
 // use 64x64 sprite, (add to sentry bitmap)
 // define as centres, so for a long one, multiple entries:
 // forcefield x y sentry image
 // sentry is the one which if destroyed it removes the forcefield.
 // nice to animate forcefield, but we need to collide with it as well, so maybe just colour cycle it.
 // Do forcefield collision in sentry routine.
 // Ah. do we do ship-sentry collisions? No.....
 // Could dynamically modify map (if it's tile map, obviously) - sprites better, I think.
 // add door-opening sentry images (red sphere, change to green when 'destroyed'?)
 // Could have 'bouncing force fields, by ++ gravity. Really only works for horizontal fields though.....
 //  unless we add in a term to xv/pos calc for 'x force', and have ff code poke it.
 // So, yes, add x, y force term to ship calc. Normally zero, poked by 'area' code.
 // forcefield x1,y1,x2,y2, strength, sentry, image1, image2
 // use code similar to raceline to derive 2 areas with opposite accn.
 // image is full size? or 64x64 and we duplicate. line is multiple of 64 (or you'll get overlap at end)
 // when 'sentry' hit, sentry goes green (sentry code), stop displaying FF image (switch - or just off?)
 // areas go to '0' accn.
 
 // *try double size running man - 1.5 better
 // *animated jewels?
 // *FREE FONT MEMORY???
 // *Better forcefield drawing, i.e. use draw_bitmap_region to just draw part of sprite image
      FF will look better drawn before map...
 // *Shrink cross map
 // *bigger jewels! 
 // *Shelf in hex cavern + SENTRIES
 // *cross map scrolling 
 // *angled sentries
    *Add to thrust 1,2
 // *cross map collisions on /| tiles 

 //priority:
 // *ship 3
 // *more sounds (yippee, clunk, wind) - engine noise instead of /as well as wind speed?
 // *filenames for new levels
 // *github - VERSION
 // *alpha channel on scifi tiles
 // *colours
 // *sliding menu on resized window
 // *(pretty fonts (logo in cracked sandstone?, )
 // *slime tiles for cross map? Or canyon.... -> canyon tiles -> 64
 // *canyon collision - plants not solid. Struts?
 // *canyon background.... 
 // *forcefield fading 
 // *AUTO BUILD FOR DIFFERENT TARGETS!!!
 // *second switch - L5 & final
 // *Hidden passage on canyon 
 // *escape from text screen -> back to menu
 // *Hi scores (test some more...)
 // *improve race integrity...
 // *fastest times.
 // *new level descriptions (*forest, *reactor core, *canyon)
 // *credits.
 // *more graphics tart up (eggs, slime) 
 // *Thrust levels *3,*4,*5,*6 
 // *New FF/switch behaviour
 // another level???
 // *neutron star gfx rework?? - sliding background, so new rocks, and neutron star.... 960x720? - alpha on asteroids
   // type 2 map - single image, no rescaling - yup, but => big image. 1280x1280 *just* big enough.....
   // change map - no rock borders, just scattered asteroids.... wrap everywhere, so nothing too close to edges, I guess....
   // layout good; 1920x1920, better pad rocks. background 1280 seems good.....
   //drag and drop files to maintain alpha - copy/paste via irfan view loses it.
   //P2 gap too small???
 
 // ?re-jig menu (as per network section)- animated ship selection.
 // *backgrounds for type 0 - became type 2....
 // *Check all levels - starting, lives, sentries etc....
    *slime on orange and purple tiles - colours in general.
    *render all new hex tilesets (apart from blue). Check colours against thrust.
    *fade levels
    *check all .txt files.
    *time limits for missions. And points for sentries / time ??
    *VERSION NUMBER
 // *build both targets
 // *try usb joy on windows.
 // *changes -> github
 // *build mm on rpi
 // *readme 128MB
 // *screenshots: *mission 5 (FF), *canyon (start?), *neutron star (star, plus bullets), sitimus (battle) - no gravity!
 // *RELEASE 1.0.0.0
 // contact:
 // *gurkoz, *mp, *tb, *Asbjorn, *Alex, *canyon, *KIIRA, 
 // finnish thread, mc?, Zimeon,  RPi guy (malman), 
 
 // Underwater level? (single image, A? Or pov rocks - or whole thing in pov? blobs, or mesh, modeller?)
 // networking - enet...
 
 //Colours
 1,pink,	145,61,62	,237,153,154
 2,green,	22,111,38	,144,208,113
 3,blue,	23,112,111,	119,203,202
 4,lilac,	87,72,163	,185,159,255
 5,orange,	120,83,14	,120,83,14
 6,magenta,	136,52,134,	227,144,225

//Radar:
//work from collision map. 
//display map is always 2x collision, so that's ok.
//1:32 scale is 1 pixel per tile / word, so easy, but I guess a bit small - sitimus only 20x20 pixels....
//1:16 may be better, if a bit more fiddly.
//When scanning collision map, make 1/16th scale copy. For type 0/2, that's it
//for type 1, then use ascii map to create radar image from 2x tiles.

 // New struct (SwitchType)+ array in MapType
 // new init keyword switch x y closed sprite open sprite open time
 // New fns, UpdateSwitches, CheckBSwitchCollision (duplicate BSentry)
 // add drawing code.
 // State machines for FF and switch. FF CLOSED, FADE OUT, OPEN, FADE IN
 // add second switch to ff init

 // *mapmaker mouse/drag stuff
 // mapmaker lean on drawing.c (and init.c?)
 // *mapmaker static linked build.
 // *Game name....
 // *readme (map making)
 // *menu slow response. Sounds? or file opening? Neither - should only redraw when event queue empty!
 // *default to 2 player on >2 player maps??
 
  // Home pad assignment logic - ah, on mission levels, any pad you land on becomes your home pad
     This was originally intended to allow multi-life missions, which didn't send you back to the start,
     but I'm now intending 1 life only. The side effect is that all mission pads allow menu, and recharge everything.
    I think I'm happy with that.....
 
 //Hi scores / ranking
 // open nature of levels makes it difficult to store info - how do you associate hi score/ time data with a specific level????
 // Can do ranking, allocate points for kills, lives etc - just tied to player. 
 // so 1 file (on server) with 1 entry per player name, with name, and score, that's it??
 // read all on powerup into array of structs
 // pick names from list / anon / new on game start
 // (remember for next game)
 // save all back to file at game end. Read again at game start???
 // I guess you could do 1 score / time file per level, so append _scores or something, i.e. mission 1_scores.txt
 // this couldn't be tied to player easily. 
 // actually, just put logged-in player in table....
 
 
 
 // Windows port....
 //  Variable resolution? 
     *Resizable window?
     Networking?
     *icons
     *window closing
     *window sizing
     *shuffle text to match background (status and menu)
      also title and text screen?

//Network...
// Use ENet (works :-)
// Rejig menu so first col selects types of thing e.g. map selection. # players, controls etc.
// menu behaviour can be modified by server messages.
// (ship selection? - indirection in ship struct)
// Menu item for network, start server, join server, join game
// if networking, 'live' server messages (at bottom?) - first, not first, game started.....
// server name, message in txt file
// client sends keypresses (down, held??)
// server *broadcasts* position/angle (shield?, landed?) of all ships, position (colour?) of bullets.
// convert float positions to ints for sending to clients - should be sufficient for drawing,
// (well, will be, 'cos pixels are integers....)
// but keep in float for calculation.
// NB use htonl / htons etc. for host-to-netwok byte swapping :-)

net startup:
HOST:   Select 'host game'
HOST:   Select level -> Player setup, IP Address displayed, host started with connections = max players
CLIENT: Select 'join game', enter IP address -> Player Setup
HOST:   Accept connection, Net.clients++, send level to client.
HOST:   Send ID, so client knows it's home pad.  
ALL:    DO player setup -> wait screen
CLIENT: Send 'ready;
HOST:   Wait for all 'readys', send 'go'

message handler
client:connect (not really a message, but hey...)
client:disconnect
host:level
client:ready
host:go
client:key(s)
host:gamestate
host:gameover....

//Misc network
Client:
  Menu / key handling thinks it's dealing with ship 0
  Host sends id back with connect. 
  Client remembers ID and sends with key messages.
  Client uses ID to know which ship to centre, and ststus to display
  
  Host broadcasts everything.
  Maybe need to do individual messages for win/lose/score???
  or broadcast results to all.....
  could broadcast and client uses id to filter and display
  

//drawing code on client needs :
# ships (fixed...) - in go message??
for each ship: x,y,direction,thrust
#bullets
for each bullet: x,y,type?(for colouring)
#sentries/switches (fixed) - in Map.
for each: x,y,sprite. Actually, just alive/dead

//conditional?? this or everything else?
//need diff message, I guess - GAMESTATE_MENU, ah no, cos it's broadcast....
ship.menu
ship.menu_state
.ammo1_type
.ammo2_type
.user_ammo1
.user_ammo2
.user_fuel

bullet.x
bullet.y
bullet.type	;max ttl = 5000 = 0x1388 => 3 bits spare. 10 bullet types, requires 4 bits. arse.
bullet.ttl	;could make max ttl = 0xfff = 4095. then 4 bits for type....

//bullets - drawing routine needs linked list, so de-serialize needs to recreate that.
  I guess serialize can just send 6 bytes as above, then create (dumb) linked list where [0]->[1]->[2] etc.
  Serialize needs to read linked list.

FF.alpha
Sentry.alive
switch.open

menu
mode
 [local, network -> IP address:port]
map
 [list from local or network]
num players
 [default 1/2 from map, max from map]
player 1
 [controls -> keys, ship]
player...

//network todo
Network seems good with while loops on both host and client net servicing, & reliable packet on GAMESTATE.
  KEYS still 'unreliable' packet, but haven't tried it the other way.....
*init ship image to id.
*max packet diagnostics
*ff/sentry/switch
*radar

*test separate computers
test 4 player?? more??
8 player map 
MAX_SHIPS.... 

PORT???

*looks like num_ships is 2 for net games. Need to make it reflect Net.clients.....

For client, read own IP address, use to init host address string??? maybe not possible. Shame.....

late joiner (var game_started, if game_started and connect then send go. maybe....)
Or, just send go when ready. In which case, do you need 'go'?
  Host has max players from level selection, doesn't let any more join (could send 'full' message and disconnect)
  
HOST:
  Select level, read max players.
  Start host with max players connections (i.e. max clients + 1)  
  Jump to ship/control selection
  
  Allow connections:
    If < max players, issue id & level, increment num_ships. If game started, send go
    If = max players, allow connection, respond with FULL message, disconnect
  
  Allow disconnections, decrement num ships.
  
  Jump to game, send go, continue allowing connections.
  
  Game END
  
Net.client_state? IDLE, SEARCHING, CONNECTED, FULL, NO_LEVEL  
  
CLIENT:
  Jump to ship/control selection
  Start to look for host
  If connected, check map, if !map, then disconnect, displaying message. (clear message on back to 1st level)
  If full, display message. clear as above
  
  if OK, allow jump to game, wait for go.

Game completion, go back to: 
  level selection if host
  ship/controls if client - everyone stays connected. 
  What if host chooses level with fewer players allowed than are connected?
  warn? then what??
  OR
  disconnect clients, send host to level selection, stop host, restart when level selected.
  clients will reconnect automagically. in above scenario, slowest are out.
  disconnect at game over?
  kill server/reset everything when back to 1st menu.

GAME END:
  Server detects game end.
  Server stops looking for pings
  Server sends gameover message (broadcast) (and displays)
  clients receive game over message, display
  clients disconnect from Server
  when Server goes back to menu (level selection), restart ping checking
  when clients go back to menu (ship/control selection), start pinging
  
  IN MENU
  when moving back from NETWORK
    exit, so close everything
  when moving forward from NETWORK
    if mode = LOCAL
      go to LEVEL, no network
    if mode = HOST 
      go to LEVEL, start host, look for pings
    if mode = CLIENT
      go to PLAYERS, start client, ping
    
  when moving back from LEVEL
    go to NETWORK
    
  when moving forward from LEVEL


If Server ESCAPES out of game then:
 HOST: send ABORT message to all clients (broadcast)
 CLIENT:rx message and disconnect
 HOST: wait until num_ships == 1 (i.e. all disconnected) then
       stop network / back to menu
 CLIENT:wait until disconnected (Net.client_mode == IDLE?) then 
       stop network / back to menu. Display game aborted somewhow???

gameover. winner, scores, accounts/login???
stats - log hits? (owner in bullet) deaths?
crashes logged multiple times....??? on net game??? 

*Display host IP in title bar?? - num players instead, on client as well
*clean up network code
*change menu to vertical for netmode selection
*lava colours not there???? (network & local) do fading???
*what happens if client doesn't have map?
*sounds. (check)
*coloured dot not matching ship colour on host radar....
*kill servers etc.
*subsequent games
*escape from 'waiting'
*robustify menu. (multi games) disconnects??
scoring/sorting
score = ships + kills - [crashes, or killed?] ships = lives-crashes-killed     so counting all 3 is redundant...
could apply weightings, but how to decide them....
ships + kills might be as good as anything. Or ships + 2*kills????
gone for 10*kills+ships, so effectively just #kills, with #lives left as a tiebreaker.

sorting: copy across.
need Ship[i].score (have it already, for mission....)
 start: max score = 99999999
 
*prob with crediting kills:
 HEAVY splits when expired, but also does when it hits something.
 Quite like this on walls, but not on ships, as you get mega damage.
 So one HEAVY kills a ship.
 Shrapnel from HEAVY doesn't inherit owner (gets NO_OWNER, hardcoded in CreateExplosion(), 
 which is the cause of the observed symptom. I think....

*client locks up (waiting for disconnect) if host exits first from network game over.
*Eventually recovers (10secs??)
*client has thrust stuck on at start. sometimes.
*Disconnecting:
  from menu, back up
  from game, client hits escape
  from game, host hits escape, sends message  
  in final case (only) want to flag message

*client jerky....
*kill counting wrong...
*network byte order!!! - just in ping stuff, I think.... done, but only tested win<->win
*rpi build....
  copy enet-master
  ./configure && make && make install
  or... sudo apt-get install libenet (libenet7? libenet-dev?). 
  Hmmm.. 7 may relate to Wheezy, 8 to jessie ?? can't find an 8....
  sudo apt-cache search enet      might be useful...
  built eventually - needed sudo ./configure && sudo make && sudo make install
  
*Better client sounds: stop if running, engine/wind noise. - test
*Host IP address dispaly on RPi (fudged)
*Status panel at top for all clients

Improved response with poor network:
  Currently spot missing packet, and move ships on inertia. 
  Rotating locally would be nice, and seems reasonable, but can't quite figure out how to do it.
  Doing rotation locally always, and sending absolute angle always seems robust.
  Server then ignores rotation.
  Problem is that collision detection will be done on server's angle, which in the case of delay won't be the
    same as clients. Hopefully not too bad, as at least position is the same.
    Other clients will be further behind.
  Thrust locally seems harder. I s'pose you could do the same; position updates locally, send position to server.
    you get lag on collision detection, but could try it. (and more lag on other clients)
  Firing has to be passed up, I think; Need server to keep track of all bullets.
    could pass 'fire normal' or 'fire special' field in message.
  Navigating ship config could also be done locally. Then need to pass config to server.
  
  Summary:
  ARCHIVE CURRENT CODE!!!!!!!
    call UpdateShips for clients.
    Send ship pos, angle, thrust etc to server, instead of keys
    Server only calls UpdateShips for itself
      instead, copy net message to Ship[id]
    Client also sends fire message (0,1,2) - flag in Update ships, append and clear flag in SendKeys (or whatever)
    Client sends ammo levels, ammo types, fuel, to server too.
    probably not that simple.....
    Server will need to re-broadcast all this, so each client will need to ignore its own info.  
    ...except shield, and lives, as these will be changed by collision detection, and therefore need to come from server.
  See if this works better....
  
  so.... for net client, it uses controls from 0, so update ships will update ship 0. 
  we then send position etc to server with Net.id, so server updates position of ship[Net.id], to broadcast to other clients.
  client then ignores server message for ship[Net.id]
  err..... OK, fixed by copying Ship[0] controls to Ship[Net.id] controls in ScanInputs() (I think)
   ah no, redone with a 'mapping' from 'controls' to 'ship'
  
  Found problem with Ship[].landed - cleared on client in UpdateLandedShip when thrust pressed, and sent to server,
  but server sets it in collision detection, and sends it back. odd conflicts, seemed timing dependent.....
  
  So, do Ship-wall collision locally as well - landing/taking off and crashing all good :-) (as long as you igbnore 'shield' 
  field from server.
  
  Need to do ship-ship collision on server, as otherwise 2 clients might not agree over a crash happening! Bullet-ship on server
  also seems desirable, otherwise bullet updating may get messy....
  
  So need some way for server to notify clients - add 'damage' field to ship struct, accumulate damage in bullet-ship and 
  ship-ship collisions (use 100 for ship-ship) and send in GAMESTATE, then zero on server. Client modifies local shield.
  
  Don't need to send any 'local' ship info over network 
  DON'T NEED:
  landed, shield, fuel, ammo
  menu, menu_state, user_ammox, user_fuel
  xv,yv
  DO NEED
  ammo_type (for bullet creation - simpler)
  reincarnate timer (to not draw exploded ships)
  NOT SURE
  lives (depends how we do game over)
  
  add field to CLIENT_SHIPSTATE - could be fire normal, fire special or explode. 
  (0x00 - nothing, 0b 0001 0000 explode 0b 0000 1xyy - fire, xyy is type, so normal/special can be inferred from x. Might be easier to 
   just send ammo types in every packet...)

  Ah, need to notify server of kills/killed...... and think about game over stuff.
  
  game over could be checked by server when rx shipstate (have to send lives) and poked there. 
  This is similar to what the client does when it rx's GAMEOVER message....
  Better maybe, client sends CLIENT_DEAD message when its lives used up.
  Server responds with GAMEOVER, as before.
  
  bullet-ship collisions done on server, but shield modified by client. Tricky to allocate kills.....
  could attach owner to damage field, then client knows who killed it (2 bullets in 1 frame, don't worry about it...)
  Client sends separate message : 'credit 1 kill to ship x'?
  
  *momentum from bullet to ship.....  
  *send xv and yv but then modifying in two places....? better to add momentum to damage...
  send bullet xv, yv, also bullet type, so mass can be looked up (mass is float, so easier to send type, as it's int :-)
  calculate momentum change. Remember xv/yv must be cast as signed. 
  It's tempting to think that you can look up damage from type, but that's accumulated, in case you get two impacts in 1 frame. 
  This is unlikely, but better to not screw it up...
  
  *also good to send xv yv for wind speed sound 
  
  check network sounds
  
  probs: 
    *client crash on exit game. 
    *client has wrong colour/image for server ship 
    *client draws server ship, even when destroyed
  
broken local things:
*no status display
*cant have more than default number of players (in ship/control select screen)

Updating github:
collisions.c - network.
drawing.c - make menu fit display dimensions
          - remove status bar / redo UI
          - start android controls
game.c - all of above!
objects.c - add shrapnel bullet type

- *tile background on type 2 and fix scrolling :-)
- 8-way level; use red canyon 
- radar, mute buttons?
- android controls: 
  012
  345
  678
  - 'default' to '4'
  - if 'left' sub 1, if right add 1
  - if up sub 3, if down add 3
  - use as index for displaying control pad
  - use touch start or touch move => key pressed
  - touch end or touch cancel => key not pressed
  
  - could put slow reload on heavy weapons - better than repeated press?

Allegro needs at least the API 12 SDK platform == Android 3.1 platform (HONEYCOMB_MR1) 
Enet was ported in December 2010, so was prob. targeted at Android 2.2. May be broken now......
'port' seems to be just repackaging so it will build for android. 
Could maybe just build enet as static lib, then link to it. Think this is what I do now.....

display of dpad and thrust button is good
need to have adjustable control size? - (so more buttons - up/down for adjusting - remember in file?)

typedef enum
{
	DPAD = 0;
	JOY_BUTTON;
	BACK;
	RADAR;
	BIGGER;
	SMALLER;
	NO_BUTTON;
}ButtonType;

typedef struct
{
	int id;
	ButtonType button;
}TouchType;

//keep track of touches on buttons

TouchType Touch[NUM_TOUCHES];

#define NO_TOUCH 0xffff

touch controls
touch begin
  Find free entry in Touch[]  (i.e. Touch[i].id == NO_TOUCH)
  if in dpad area, 
    log touch / button combination
    check for l/r/u/d areas - poke joystick struct
  else if in thrust area (button area? - change size/shape location from menu to game???)
    log touch / button combination
    poke joystick struct
  else if in back area
    log touch / button combination
    poke key log?? or new var??
  else if in radar area
    log touch / button combination
  else
    log as NO_BUTTON

need to 'debounce' escape/f10 etc keys??? - maybe OK with key up and key down logs......

touch end / cancel
  spin through Touch array - if touch end id matches any: (always should, I think....)
    poke joystick struct / key log to release 
    set to NO_TOUCH

touch move (COMPLICATED!!!)
  spin through Touch array - if touch move id matches any (always should, I think....)
    
    if was on dpad (do this first!)
          if still on dpad
            check dpad areas and poke joystick struct
            => NEED TO REMEMBER WHICH DPAD AREAS ARE PRESSED!!!!!
            => MAYBE NOT!!!! see usb joystick code (i.e. if left == true, right = false etc....)
          else
            drag dpad. Limit to screen edge.....
    else if was on button (NOT dpad)
      if still on same button
        do nothing
      else
        (treat as touch end) - or move (drag) button - only for thrust
 
    else (was on nothing)
      (treat as touch begin)


Hmmmm.... need to track which touch was on which control.
So could have array of controls and store touch number against relevant control.
OR array of touches, and store controls. 
Array of touches maybe easier.....
..problem is that there's no guarantee on limits of touch.id field

hmmm.....

could have a struct with {touch.id,BUTTON_ENUM}
and then an array of them, for the number of touches I want to support.
Then have to run through array......
but in the absence of guarantees on touch.id values, I guess I have to....


so.....
array [struct {string, fn_ptr}]
string is mode,map, etc
fn_ptr points to fn to do remaining enu

long sliding map list? or keep expanding?

For map list scrolling
in touch handler
- touch begin: highlight
- touch move: add dy (dx) to yoffset (xoffset)
- touch end: if dy > threshold, speed = dy, else select
- touch cancel: ??

in display
- multiply speed by damping factor (?)
- add speed to offset
- limit offset. ping if limiting
- draw with offset

Add field(s) to Command struct for menu selection??
or have menu code read touch array?

need left/right buttons for ship selection, I think.....

---------
could have touch to select / display, then tick button to confirm.
or 


**MUSIC/FX VOLUME

android menu
------------
- stick to 3 screens (network / map / player) 
- add instructions (and controls? or the same?) entry to network screen
- 

android to do
--------------
* right always pressed in menu???
* slow from description text to level (Forward or Back)
* crash on end of level exit -mission only. (controls on top of white-out)
* force single player
* control size
* layout for back/size/radar
* dragging
* orientation - al_set_new_display_option() 
* networking - *crash (as client) on SOCKET_SET thing..... - needed permissions in manifest :-)
* tilt comes out as joystick 0. Try using this for rotation,
  could do variable rate, take float from joystick, add to angle, 
  round to int for display etc.....
* Gone for analogue stick style controls - just does direction, so need 2 fire buttons as well. Seems OK......
* scaling - base on screen resolution, so everything is in proportion.
* slow in level menu
* leave app??
* hi scores - keyboard
* render controls opaque, draw with variable transparency. better....
* saving hi scores
* debounce
/////////////Play store. 1.01
* half normal ammo on mission.
* kills count / reset?? - seems ok......
#* immersive :-)
* DPAD / ASTICK share coords - lock ASTICK on game start
  * if touch moves off astick, keep calculating angle.
* Knock on effect on debounce?? seems OK....
* OK (tick?) button for menu - same place as thrust.  
#* instructions * code * text * crash on scroll. * better scrolling on instructions  (swipe?)
* credits->instructions
* space after keyboard press
* re immerse after keyboard
* status on non-android instructions
* thrust/fire buttons depress on touch
X fade on android instructions.
* less aggressive sentries?? Android only???
* multi-layer background for missions.
#* haptics
* better blurb.
  GravStorm is an underground gravity war game, with echoes of classic games from the '80s and '90s. 
  Gravstorm can be played solo, or for even more fun, play against friends over WiFi.
* Alpha on RC tiles
* tweak level descriptions
* RPi Build
* don't drag thrust button.
#* LH controls?? swap button displayed where radar is, during menus.
* remove red highlighting 
* waiting for host animation? seems ok.
/////////////Play store. 1.02
* new flicker fix
* zero controls on menu state change
* size / switch buttons work on level text screen
/////////////Play store. 1.03
* touch move off -> release button.
* scroll/touch menus
* less debounce
* 5/3 buttons
* network messages (fit on screen, show waiting?)
* ->github
->playstore (password for APK signing is usual....)
- ->kids
- videos
- promote
- code clean up (dead code, scale factors)

Added instructions
Added support for Android Immersive Mode
Added vibration effects
Added support for left-handed controls
Assorted small enhancements to playability and graphics

0.77
y 704

MAYBE LATER.....
----------------
- 8 way level? team mode? (switch in txt file)
  - can't quite see how 'capture the flag' works, unless it's just land on 'their' base
  - or first to land on 'centre' pad?? - Can't really retrieve anything, as what happens if (when) you crash on the way back?
  - so just (team) kill count?
  - if (team) -> only 2 ship choices, random allocation? or alternate? allow changing?
  - count kills/lives at end, add up those for same team.....
- wall collision vibrate proportional to speed??
- android crash on pause - OK with nav buttons - only crashes with f/p sensor.... Check events??
  no events -> ignore for now.....
- back/exit on system back button? 
  can override OnBackPressed, but don't hit it.....Maybe because we need to override in AllegroActivity, not MainActivity??
  Ah, is this because I'm using the FP sensor again???
- recalc scale on menu state change?? (why??) - to recover broken startup condition??
- control size storing (size and location)
 
  
GravStorm is a game where you try to destroy your opponent's spaceship in a variety of environments. 
Players of classic gravity games from the '80s and '90s will find much they recognise and enjoy!

o Single Player or Network play
o 7 Mission Levels
o 14 multiplayer levels
o 8 different weapons
o Completely Free! No Ads, No Nags, No In-App purchases.

ANDROID BUILD:
---------------
Follow: https://github.com/liballeg/android
add ndk.dir=C\:\\Android\\ndk to C:\IPL\gravstorm\local.properties
add     repositories {
    	maven { url 'https://bintray.com/liballeg/maven' }
        maven { url 'http://repo1.maven.org/maven2' }
    } 
    to C:\IPL\gravstorm\app\build.gradle
    
to force landscape add:
in AndroidManifest.xml, inside  <activity 
            android:configChanges="orientation|screenSize"
            android:screenOrientation="landscape" >
            
AND            
    al_set_new_display_option(ALLEGRO_SUPPORTED_ORIENTATIONS,ALLEGRO_DISPLAY_ORIENTATION_LANDSCAPE,ALLEGRO_REQUIRE);
    
    
Instructions:
----------------
Fly around, shoot your enemy. Don't crash into the walls.

If it's a mission level, pick up stranded miners and bonus jewels by 
landing on the pads, then fly away from the surface to finish the level


controls:
---------
graphical? i.e. put buttons on screen, with labels 
need to scroll ? - (for menu, implies 'click on release' as tap-and-drag scrolls....)
DPAD
Rotate anti-clockwise
Rotate clockwise
Fire normal weapon
Fire special weapon / enter config menu

BUTTONS
thrust
radar
back/exit 
[bigger, smaller]

STATUS PANEL
shield
normal ammo
special ammo
fuel
ships left

miners
jewels
mission time

last lap / best lap
current lap

Press down/fire special when on landing pad to access the ship config menu:
ship config panel

mode     | local | network [on change to local load local map list. on change to network, enable IP address, search]
           address: 192.168.0.1

player 1 | ship [image]
           keys | gpio joy | usb joy etc
           [if keys]
           left: <left key>           [pop down on keypress]
           right: <right key> etc
                      
try chronological, so state machine,
1: network / map (incidentally, need matching maps on client/server......)
   mode
   local | network
   server
   xxx.xxx.xxx
   maps.....	(show max players)
   
2:  players
  0 1|2|3|4
    P1
  1 ship....
  2 controls....  keys (if needed)
  3 define keys ->
    P2
  4 ship....
  5 controls....  keys (if needed)  
  6 define keys ->
    P3
  7 ship....
  8 controls....  keys (if needed)     
  9 define keys ->  
    P4
 10 ship....
 11 controls....  keys (if needed)     
 12 define keys ->  
   
   escape to go back, enter/thrust to go on.

OK, good.
Maybe initial state for network:
 Local
 Host Network game (=> start server, connect to (local) server)
 Join Network game (connect to (remote) server)
   Address?
 
 Display network messages  on all menu screens, e.g.
  Host started, Address = x.x.x.x 
  Connected to host, waiting for game to strart
  n players connected
  
//windows static buid:
  many distributions of mingw
  official binaries + deps + mingw-w64 https://sourceforge.net/projects/mingw-w64/
  add /bin to path
  point c:B at mingw
  point to compilers: gcc, g++
  libs:
  in addition: 
    libpng16.a
    [libzlib.a]
    libjpeg.a
    
    libshlwapi.a
    
  other
   -static
   -lpthread
   
   //*clean up code (REMOVE DEAD)
   //*gRAVSTORM  in top of files
   //*win static build of MM
   //*RPI static build of MM
   //MM lean on drawing/init more??
   //levels
   //*fix to tile display - optimize more with shifts.
   //*more sounds...
   //scoring - points for win, ships left, ranking, bonus points for kill by shot, kill by 'standard' shot
     lap times, high scores for missions
     log in for 1/2 player
 
 //*behaviour when landed - menu doesn't appear on down / sitimus 4p ; quickfire doesn't work....
 
 // Android port?
   ANdroid Studio: (IDE, SDK=toolchain?, )
   NDK - Native Dev Kit. allows use of 'native' languages i.e. other than Java, e.g. C, C+
   CMake - Studios default 'build tool' for 'native' code.
   
   download android studio - install
   run, needs jdk, download, install
   run again, more downloads - retry, unattended
   new project - domain name
   if 32-bit windows, point to downloaded JDK, not bundled (file, project structure)
   then download ndk (also F,PS)
   Whinge about cmake, can't install from gui, maybe because of 32-bit?
   download (32 bit version) install
   
Error while executing 'C:\Users\ilewis\AppData\Local\Android\Sdk\cmake\bin\cmake.exe' with arguments {-HC:\Users\ilewis\AndroidStudioProjects\Test1\app -BC:\Users\ilewis\AndroidStudioProjects\Test1\app\.externalNativeBuild\cmake\release\armeabi -GAndroid Gradle - Ninja -DANDROID_ABI=armeabi -DANDROID_NDK=C:\Users\ilewis\AppData\Local\Android\Sdk\ndk-bundle -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=C:\Users\ilewis\AndroidStudioProjects\Test1\app\build\intermediates\cmake\release\obj\armeabi -DCMAKE_BUILD_TYPE=Release -DCMAKE_MAKE_PROGRAM=C:\Users\ilewis\AppData\Local\Android\Sdk\cmake\bin\ninja.exe -DCMAKE_TOOLCHAIN_FILE=C:\Users\ilewis\AppData\Local\Android\Sdk\ndk-bundle\build\cmake\android.toolchain.cmake -DANDROID_NATIVE_API_LEVEL=15 -DCMAKE_CXX_FLAGS=}   
 
 // Sentry damage shield:
    TR has rapid fire bullets, (max 100) with low damage (3)
       also heavy weapons (max 8) with higher damage (50-80)
       weapons recharge on pads.
       Ship shield starts at 100
       
    Thrust ship has unlimited single shot gun, where 1 hit destroys anything (ship or sentry).
    Close-ish is: *Just use heavy weapons (init ammo to 0/max(8))
                  *Sentry shield = 50 (or less....)
                  Sentry shot damage = 100
                  *Need fewer sentries on 'hex' map. Or a less lethal type....
                  or keep damage at say 50
                  
 //Issues
 // reduce sound latency
 //*smarter parser for map files....
 
 //Small jobs
 //*ammo 2 firing, handle collision
 //*gpio joystick
 //*bullets bug.
 //*momentum from bullets to ship on impact (and firing??)
 //*render ships, make sprite sheets, make masks.
 //*end game on lives = 0;
 //*fuel decrement and checking
 //*png support
 //*sprite sheet rotation
 //*variable map size - needed for stop scrolling in corners. also, map size in pixels, not tiles for old TR maps.
 //*2-level defaults. also for fuel, ammo amounts.
 //*put damage & mass into bullet structure
 //*highlight on status bars
 //*status/menu backgrounds
 //*fixed point maths? - no, RPi has fp (if compiled everywhere...) - but rationalise floats.
 //* Note that Rasbpian is always hard-float (i.e. uses ARM fp hw)
 //*more normal and heavy weapon types - normal is patterns, rather than types. reduce types to 5?
 //*refuelling - bottom nibble is home base, next nibble is bit-mapped facilities
 //* if(Ship[i].pad == i || (Ship[i].pad & PAD_FUEL) ) //do refuelling 
 //*Ship drawn first/last - parameter in map file/ struct (untested...)
 //*bullet/wall supersampling
 //*all printing to log. 
 //*more ship types 
 // haven't done collision masks 
 //*mass calc - gravity in wrong place - acceleration, not force!
 //*keymapping (in text file for now - tricky with eg cursor or ctrl keys....)
 //*gravity (& drag?) for bullets
 //*memory issue ; make sure stuff gets freed; free map on game over exit, not on re-init?
 //*key mapping.
 //*menu highlighting of non-selected columns.
 //*resources to diff directory.
 //*need to sort joystick in ship config menu
 //*random - put level description text in another .txt file (suitably line-wrapped) - reference it from mapfile.
 //*  display after front end menu done.
 //*put max players and race lines into other maps
 //*add bottom-right landing pad to sitimus map / collision map / text file.
 //*max speed for heatseekers? could do via drag?
 // SO Ship max v is 25, I think, as Drag = 2, d*25 = 50 = THRUST.
 // HS max v depends on range (as thrust equivalent is 1/r^2)
 // So to get HS v = 25 @ (say) 100 pixels,
 //HS_ACCN = 50 * 100^2 (for r^2) = 500000 (with same drag as ship)
 //HS_ACCN = 50 * 100 (for (r)  = 5000 (ditto for drag).
 // give it a go....
 //however, ship accn is limited by mass, so net thrust is 50 from 0 velocity,
 //but accn is only ~0.5 (average ship mass = 100)
 //so divide hs by 100? (to get similar performace) or less, 'cos it's lighter
 //but numbers above still give max speed = 25.
 //If you have less drag (say drag/10) then drag = 0.2, 25*d = 5 (cf 50)
 //So HS_ACCN scales with drag. Might as well leave it as ship, it's all in floats anyway.....
 //NB was 70, no drag, 1/r (seemed OK ish....)
 //Still not happy. Too easy to 'break away' as if HS > 100 pixels away, ship thrust is more.
 // So, can we set a maximum on thrust? So still varies with 1/r^2, but gets to ship equivalent at (say) 400 pixels,
 // but never gets more? 
 // Yes! Done this seems good.
 //*blackholes: Maths v.similar to heatseekers
 //*test GPIO on/off
 //*new source files: objects.c (ship, bullet functions)
                     inputs.c (kb, joystick functions, inc ScanInputs() )
 //*screenshots
 //*remove debug -d switch?
 
 
 //To test/fix: 
 // *menu background
 // *refuelling for all levels.
 // *bullet wall oversampling. fixed, i.e. doesn't crash, check if it works. done, but do we need backwards and forwards?
 // *ship first drawing
 // *hsay is backwards? not quite sure if it all is - test heatseekers vertical??? seems OK. Don't entirely understand...
 // *normal firing types - need flexible reload counter. done. test
 // *test spreader
 // *increase colour depth on all maps except sitimus - and check transparency.
 // sound latency.... try allegro.cfg... didn't work - try .asoundrc. Didn't work so far....
 // could try:create voice, create mixer, create sample instance, attach sample instance to mixer, attach mixer to voice.
 // then play sample instance....
 // should only need one voice and one mixer for everything.
 // tried it;no difference......
 // Try rtaudio, and for opening wav files, see http://yannesposito.com/Scratch/en/blog/2010-10-14-Fun-with-wav/
 // better: Pre process to fixed sample rate/depth in Audacity, and export as raw pcm.
 // different font for menus.
 // *pad numbering: currently read into pad array index as we go through text file. This gives home base.
 //  also, home base is given in bottom nibble. This is bad......
 //  Taking home base from index ensures you have 1 of each, but means that the bottom nibble is
 //  effectively ignored.... Using bottom nibble means that you could end up with multiple home bases
 //  (maybe intentional - though you can only reappear at one of them....) or no home bases for some ships...
 //  Like using bottom nibble better. Need yet another entry in Ship struct for home pad...
 //*New heatseeker maths
 
 //Heatseekers
 // gravity-like force, so magnitude is proportional to 1/r^2
 // SO get vector from bullet to (each) ship, x^2 + y^2 = r^2, acceleration = K/r^2
 // need to apply this in the correct direction, so multiply a by x & y,
 // except that yo need to normalise the vector first, so a*x/r, a*y/r.
 // save a division by K*x/(r^3), K*y/(r^3).
 // However, square root may be expensive, so could try CORDIC
 // this gives you r & theta, sinlut[theta], coslut[theta] gives normalised vectar
 // but we do need to divide theta(degrees) by 9 to get LUT index....
 // also need to square and divide by r^2
 //SO: Square, square add sqrt mul div, mul div - sqrt 2 divs
 //OR: CORDIC div LUT LUT square mul div div - CORDIC 3 divs
 //check after getting r / r^2 - skip the rest if it's big, as effect limited.
 //Hmmm.. cordic might be able to do other things....like get sin/cos, though that's starting with the angle....
 //Hurrr.... looks like RPi (ARM11/ARMv6 w/FP (VFPv2) has h/w FP divide and FP sqrt, both taking 14 cycles.
 //  so I might as well use them.....
 // I've just explicitly turned on FP in build script....
 //check here; http://www.eliteraspberries.com/blog/2013/08/cflags-for-numerical-computing-on-the-raspberry-pi.html
 // Hmmm.. could maybe scrap -pthreads and -lrt
 /*
 
 Collision detection
 --------------------
 Will ultimately need pixel-perfect CD, but that's expensive, so limit it.
 Bounding boxes for ship-to-ship seem good, then do PP if BB says yes.
 Or distance? Could do x^2+y^2<80^2 - this is 2 subtractions, 2 multiplies, add and compare
 or do x/y separately would be abs(x1-x2)<80 (sub, abs, compare) same for y. better I think.
 This seems roughly equivalent to BB, but I'm not absolutley sure. 
 If both conditions pass, then go to PP. Take 2 masks, overlap them. Note that I'll need masks 
 for each rotation, which implies sprite sheet rotation, rather than al_ rotation.
 Also note that you just mask the ship, not the flame. 
 
 NO! The collision masks and ship display are completely separate - There's no reason you couldn't keep 
 using al_ rotation for display, and use still collision masks. Angles would have to agree, obvs...
 That said, I think I'll try to do sprite sheet rotation. POV rendering everything looks promising, and 
 Napoleons sprite sheet editor seems to do what I want. (NO! GlueIt much better!)
 
 Bullet-to-ship: do distance compare as above, but can just check for point against mask, 
 as bullets are small. Not absolutely sure how to relate the two though.... Maybe just 40,40 offset from 
 centres? 
  
 Which leaves ship to wall. Ah yes, also bullet to wall. 
 Bullet to wall could be done with BB, but there's a lot of BBs... ah, but not so many tiles.
 Check for which tile bullet's in, lookup tile, then compare position-in-tile (bitmask, as tile size is poewer of 2)
 with tile pixel. Again, only do 1 pixel 'cos bullet is small. Compare alpha values?
 
 
 Ship To Wall
 -----------
 Back to ship-to-wall. Could do something similar, but will be more complicated cos ship can 
 be in more than 1 tile. I s'pose compare ship mask to tile mask, as above, for each tile ship is in.
 Simplify by not checking if tile is empty. Also don't check if tile is full - just declare collision.
 So it's only partly filled tiles that are hard - minimise them! Rubbish! you're always going to collide when 
 the ship and the tile are partly overlapping, so it's a question of whether any non-empty pixels from the ship overlap
 non-empty ones in the tile. If the tile is full, then that might be slightly easier, but not much.
 And genuinely full tiles means dead straight up/down/left/right and therefore quite boring maps.....
 
 Looks like TR maps may not be tiled, so need to load whole bitmap (OK at original TR resolution...)
 and display part of it. (with draw_bitmap_region (possibly scaled)
 
 So if you can get collision map(/tiles) into 1bpp, and then pack 8 pixels into a byte (/32 into an int...)
 and do the same with the sprite collision maps (just the alpha value - of the ship, remember, not the flame)
 Then you can compare 8/16/32 pixels in one go. smart :-) Ah, alignment issues mean it's not that simple.
 
 I'm tentatively happy with displaying TR map x2. Ship size will be something like 50x50. Display / movement is fine (need
 to tweak gravity / thrust / drag). So to do collision, we need to either halve ship coords / mask or double
 collision map/coords. halving ship is bad unless ship size is power of 2, so go for doubling map.
 
 So, we have an array of ints with each bit representing a pixel in the ship. (3x16 = 48, so that might be a good size...)
Say array is 3*48 x U16 (note one array for each rotation - or one big one for all rotations. Not sure which is better/easier).
We have another array of ints which is the same for the collision map. This will be bigger - 640*640 map gives an array of
40*640 x U16

Ignorning doubling/halving for the minute, say ship centre is at 100,100. Ship TopLeft is at 76,76. So I need to AND the first 
word in the ship array with the bits from row 76 of the array, starting with b12 in word 4. 
I can get to row 76 easily, and word 4 comes from 76>>4. b12 is 76&FF. 
So, take word from ship array, promote to 32 bit, LS by 16, then RS by 12 (combine, obvs). Split into 2 U16s, and compare
these with w4 and w5 from the map array.
I then need word 2 from the ship array. This needs to be checked against w5/w6 with the same shifting (I think), then word 3 /6&7
Repeat for next 47 rows.

If the map was stored as 32 bits, then I could halve the word index (so lword 2)do the shift and directly compare, I think.
Ah, well yes, but only half the time. There will still be times when the 16bit word overlaps a 32bit boundary. So don't bother.

Now consider double scaling. If ship centre is at 100,100, this corresponds to 50,50 on the tr map. TL will be 76,76 = 38,38 on tr map.
If we store the collision map as 640 rows, but 1280 columns, with each bit/pixel duplicated, we double the size of the array, to 80*640
but can do the compare as above. We need to use row 38, but all other calcs are the same. Also, we only do this for 24 rows. 
I can't see an easy way to avoid doing this on every pass. Effort involved is:

For each ship, on every frame:
 Calc TL (2Xsub from centre pos)
 RS to get halved row.
 RS to get word in row
 mask to get bit in word
 x24
 	x3
 		Read word
 		Shift, split	;store map as 32 => no split, 1x AND? No, well, yes, but only half the time.
 		2xAND			;so on average you'll save mips, but the extra complication prob isn't worth it.
 		compare to zero
 end
 
 Hopefully doable....
 
 Alternative approach: for double scaling, you need a ship mask which is 24x24, not 48x48.
 You can store ship mask in 32bit words (24 long ints)
 If you also store map mask in 32s, then you need 1 or 2 compares per row.
 Ship mask will be left-aligned. 
 So say ship is at 100,100 (centre) - this is 50,50 for collisions. SO we need to move the centre to 50. This is 18 pixels in to 
 so we need to compare map 18 to ship 0. this means shift right by 18, then AND ship with map. we then need to take next map word, 
 and AND with ship LS so that bottom 18 bits are compared, - this is LS by (32-18=) 14.
 
 
 If we were further in, say 500, that's 250, 
 which is 7*32=224 + 26, so take map word 7(6) and compare to ship right shift by 26, then word 8 to ship LS by 8.
 
 For a small first shift, say the ship is at 66->33, we take map word 2(1) and compare to ship rs by 1. We would then,
 as above, compare next map word to ship ls by 31. as this is >23, there's no point, so don't bother.
 
 Repeat this for 24 rows, but shifts are the same for each row :-).
 

 
 Ship to ship:
 -------------
 First do bounding box, iff that collides, then:
 
  ShipSize - mod(y1-y2) = number of rows to check = nr
  start with top row in lower y. Start with nr up from bottow row in upper y.
  ShipSize - mod(x1-x2) = number of cols to check = nc
  
   
  if 16 >= nc 
  	take bigger x, lookup 1st word in ship mask, LS by nc%16 (simpler)
  	AND with 3rd word in smaller x
  
    
  if 32 >= nc >= 16
  	take bigger x, lookup 1st word in ship mask, promote to 32bit. LS by nc%16
  	  take 2nd and 3rd word from smaller x, combine into 32 bit (just grab from array via cast?? - alignment??)
  	  AND  32 bit things together 
  	
  	take bigger x, lookup 2nd word in ship mask, LS by nc%16 (simpler)
  	  AND with 3rd word in smaller x    
  
  
  if 48 >= nc >= 32
  	take bigger x, lookup 1st word in ship mask, LS by nc%16
  	  take 1st and 2nd word from smaller x, combine into 32 bit (just grab from array via cast?? - alignment??)
  	  AND  32 bit things together 
   	  	
  	take bigger x, lookup 2nd word in ship mask, LS by nc%16
  	  take 2nd and 3rd word from smaller x, combine into 32 bit (just grab from array via cast?? - alignment??)
  	  AND  32 bit things together     
  	
  	take bigger x, lookup 3rd word in ship mask, LS by nc%16(simpler)
  	  AND with 3rd word in smaller x
  	  
should be able to wind this into a for loop (reverse order of steps?) 	  

 
 */
 
 /*
 Joystick options:
 ----------------
 connect old quickshot 15 pin to second port of GPIO (15D on PCB, or 9D on cable?)
 AH, no, 15 pin i/f is analogue. Maybe hack the stick?
 Speedlink competition pro (Ithink) USB - ~20
 Atari 2600 clone USB, ~9
 cheap usb gamepad (<5)
 */
 
